<?php

namespace App;

use Illuminate\Database\Eloquent\Model;

class Project extends Model
{
    //FIELDS THAT YOU WANT TO BE FILLABLE FORM THE FORM REQUEST(CONTROLER)

    //THIS IS A GREAT SECURITY FEATURE FROM LARAVEL AS USERS CAN EDIT HTML FROM INSPECT TOOLS AND SEND IN HIDDEN INPUTS BY GUESSING NAMES OF YOUR COLUMNS AND THEN AFFECTING YOUR DATABASE SERIOUSLY. 
    //THEREFORE THIS FILLABLE PROPERTY ONLY ALLOWS CERTAIN INPUTS THAT YOU ALLOW
    protected $fillable = [

        'title', 'description', 'owner_id'

    ];

    //FIELDS THAT YOU WANNA GUARD, NOT LETTING THEM TO BE FILLABLE FROM THE CONTROLLER

    //IF GUARDED IS SET TO EMPTY, THEN YOU WILL ACCEPT WHATEVER USER INPUT AVAILABLE
    // protected $guarded = [

        

    // ];

    //== E  L  O  Q  U  E  N  T     R  E  L  A  T  I  O  N  S  H  I  P  S 

    //== FOR EACH PROJECT, THERE ARE TASKS TO BE CARRIED OUT. WE HAVE CREATED A MODEL FOR THE TASKS AS WELL AS MIGRATION FOR THE DB TABLE AND FACTORY AS WELL. 

    //== THE AIM IS THAT WE SHOULD BE ABLE TO PULL UP ANY TASK FOR ANY PROJECT FROM THE PROJECT MODEL WITH SOMETHING LIKE $project->tasks. THIS IS POSSIBLE THROUGH LARAVEL AND ELOQUENT. 

    //TO DO THIS WE NEED TO BUILD AN ELOQUENT RELATIONSHIP BY CREATING A METHOD CALLED TASKS

    //THIS IS DONE BY CREATING A METHOD WHICH WOULD RETURN THE APPROPRIATE RELATIONSHSIP, REFERENCING THE MODEL CLASS

    //A FEW ELOQUENT RELATIONSHIPS ARE belongsTo, hasMany, hasManyThrough, morphMany, etc

    // RELATIONSHIP BETWEEN PROJECT AND USER


    public function owner()
    {
        return $this->belongsTo(User::class);
    }
   

    //SINCE THIS PROJECT HAS MANY TASKS, WE WOULD USE THE hasMany RELATIONSHIP
    public function tasks(){

        return $this->hasMany(Task::class);

    }

    //A D D  T A S K S   T O  P R O J E C T

    //BEFORE INPUT VALIDATION
    // public function addTask($description){
    
    //AFTER INPUT VALIDATION
    //NOTE THE VARIABLE NAMECHANGE FOR THE METHOD ISN'T IMPORTANT. JUST MAKE SURE YOU PASS IN THE SAME VARIABLE INSIDE IT. THE VARIABLE REPRESENTS THE $ATTRIBUTE WHEN THE CLASS WOULD BE USED IN THE CONTROLLER

    public function addTask($task){

        //METHOD 1

        // return Task::create([

        //     'project_id' => $this->id,

        //     'description' => $description

        // ]);

        //METHOD 2

        //THIS PROJECT MODEL CLASS HAS A METHOD CALLED TASKS WHICH HAS AN ELOQUEN RELATIONSHIP TO THE TASK MODEL CLASS. WE CAN USE THAT METHOD, AND CREATE A NEW TASK WITH IT

        // $this->tasks()->create([
        //     'description' => $description
        // ]);

        //OR

        // $this->tasks()->create(compact('description'));

        //WITH INPUT VALIDATION

        //IN PROJECT TASKS CONTROLLER, THE VALIDATED INPUT WAS STORED IN A VARIABLE AS AN ARRAY $ATTRIBUTES

        //WE CAN USE COMPACT TO INPUT THE VARIABLE IN THE METHOD BEECAUSE COMPACT IS A PHP FUNCTION USED TO CREATE AN ARRAY OF ONE OR MORE VARIABLES AND THEIR VALUES AS $KEY->VALUE PAIRS
        //SO USING COMPACT WOULD CREATE AN ARRAY OF AN ALREADY CREATED ARRAY, AND THAT WOULD CAUSE AN ERROR

        $this->tasks()->create($task);


    }



}
